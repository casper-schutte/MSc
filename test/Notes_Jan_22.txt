Recap:
    Wrote a bash script to use my time more efficiently.
    I hypothesised that the ratio of reads that map to different (connected) borders could reveal some information
    about the rearrangement that took place.
    I will continue with testing using the example genome (changed only by splitting the single chromosome into 4
    separate chromosomes) with different rearrangements. I will record what rearrangements are made and save the
    resulting files in the folder in Desktop: example.

    NB: In the bash script, the first files (sa1 and ma1) represent the reads from the REARRANGED genome
        being mapped on the ORIGINAL genome. This convention is simply for clarity. In reality, it is likely
        that both genomes will contain rearrangements with respect to each other. "Both outputs" refers
        to the results of mapping the changed to the original and vice versa, together.
        Inversion and reversal are used interchangeably.

Experiment 10:

    Experiment 10.1:
        Rearrangements:
        First 280 bp (4 lines) duplicated from chr1 to end of chr1
        700 bp deleted from chr2, starting at position 700
        Translocated the first 210bp from chr3 to the middle of the chromosome

        I will stick to using 2 different read lengths (100 and 200), with a total coverage of 20x


13/01/22:
    - Finished the bash short course on LinkedIn.
    - Continuing with testing.

    - Upon testing the algorithm with the above parameters, it seems that there is some mistake. The same position on
        different chromosomes is being reported as the same "hit". This is a problem that needs to be fixed. I thought
        I had already changed the python script "find_borders_test.py" to avoid this issue. Doing a thorough
        read-through of the code to catch the mistake.
        Here is an example from the erroneous result:

Chr1 	 	 1 	 	 r2856 	 	 38 	 33S167M
Chr1 	 	 1 	 	 r2993 	 	 18 	 36S64M
Chr1 	 	 1 	 	 r2994 	 	 38 	 36S164M
Chr3 	 	 1 	 	 r5816 	 	 21 	 61S139M
Chr3 	 	 1 	 	 r5902 	 	 21 	 64S136M
Chr3 	 	 1 	 	 r6488 	 	 21 	 60S140M
Chr3 	 	 1 	 	 r6742 	 	 21 	 58S142M
Chr3 	 	 1 	 	 r6950 	 	 18 	 73S127M


    - Have isolated what I presume to be the error. In the python script, when a hit (such as the hit on position 1 of
        chromosome 3), does not have any reads that score above the threshold, all the reads that support this hit
        are placed in the non-confident list ("nonconf_borders"). Thus, when the non-confident reads are being
        appended to the "correct" list of confident borders (by allowing some distance in position), the reads are
        appended to the list containing the border at position 1 on CHROMOSOME ONE, instead of CHROMOSOME 3 where they
        should be.
        The script needs to check that not only is the position correct, but also the correct chromosome name.
        If there are "leftover" reads (reads that map to a position that is not supported by confident reads), they
        should be either appended to the end of the text file under a heading such as: "non-confident borders" or
        excluded altogether.

    - On the other hand, I think the python script should change such that it takes all 4 sam files (1 single reporting
        mode, 1 multiple reporting mode, and the 2 reciprocals of these) into account and perhaps tries to match the
        borders up. The positions will be different but it might be possible to use the connected borders to assign
        the borders in one genome with the borders of the other.

    - For now, I will be fixing the python script as mentioned in the second paragraph of the first bullet point.


15/01/22:
    - I tracked the problem down. I was missing a check during the process of adding the non-confident borders to the
        appropriate list. The script now checks for position (within allowance) and chromosome name. The results look
        good. All the borders were identified. The border position is sometimes off by 1 or 2 base pairs, but this
        is to be expected due to spurious matching.
Results (exp10.1):

connected borders:
[19, ('Chr2', 702, 'Chr2', 1400)]

[24, ('Chr3', 1, 'Chr3', 5462)]

[34, ('Chr1', 1, 'Chr1', 14701)]

[19, ('Chr3', 211, 'Chr3', 5460)]

    The 4 associated SAM files were saved. I will recheck these results, but they appear consistent with expectations.


    Experiment 10.2:
    Exactly the same as the previous experiment, but with different rearrangements.
    Rearrangements:

    1) Duplication from last 4 lines (280bp) of chr 3 to end of chr4

    2) Deletion of 140bp from end of chr1

    3) Reversal of 350bp in middle of chr2

    4) Translocation of 700bp from start of chr3 to start of chr1

Results:
    All 4 rearrangements were clear in the output text files. Interestingly, the reversal in chr2 did
    not show up in the connected borders. This makes sense because the reversal does not result in a
    change in position of the breakpoints. The duplication was detected as a connected border but only
    when the rearranged genome was mapped onto the original. The translocation was detected in both and
    "flipped" around (as seen below).
    All the rearrangement breakpoints had multiple reads with maximum confidence, and many more with lower
    confidence.
    Things to check in future experiments:
    Do duplications only show up in one of the output files?
    Do reversals/inversions never show up?
    Do translocations show up in both (inverted)?

    connected borders: ma_1
[20, ('Chr3', 8261, 'Chr4', 10773)]

[18, ('Chr1', 1, 'Chr3', 703)]

    connected borders: ma_2
[19, ('Chr1', 703, 'Chr3', 1)]

19/01/22:
    Experiment 10_3:
    Made the following rearrangements:
    1) Translocation of 350bp starting at pos 700 on chr1 translocated to middle of chr1
    2) Inversion/reversal of last 559 bp at end of chr4
    3) Duplication of first 280 bp of chr3 directly after itself
    4) Deleted 770bp from approx the middle of chr2

    Results:

connected borders: ma_1
[12, ('Chr1', 1052, 'Chr1', 7141)]

[16, ('Chr2', 5741, 'Chr2', 6511)]

[19, ('Chr1', 699, 'Chr1', 7141)]

[18, ('Chr1', 701, 'Chr1', 1051)]

[16, ('Chr3', 1, 'Chr3', 281)]

connected borders: ma_2
[19, ('Chr1', 6791, 'Chr1', 7141)]

[15, ('Chr1', 701, 'Chr1', 7142)]

[17, ('Chr1', 701, 'Chr1', 6789)]


    1) Both outputs show the same 2 breakpoints in chr1, and each shows an additional one. All 4 identified.
    2) Both text outputs show the inversion at the end of chr4, and as expected, this does not show up as a connected
        border.
    3) The duplication shows up as 2 breakpoints in sa_1 and as a connected border in ma_1. As predicted, it does not
        appear in the other output.
    4) The deletion appeared as 2 breakpoints in sa_1 and as 1 in sa_2. The difference between this and the
        deletion in the previous experiment is that this one occurred in the middle of a chromosome instead of
        at the start or end.

    These results are expected and objectively good.


29/01/22:
    - Have been working on the bash script in the past week.
    - The user can choose the genome and read files from a list of options if they are named correctly:
        starting with "ref_" for the genomes and "reads_" for the reads.
    - The script performs all the alignments through Bowtie2 and the sorting with SamTools, for all 4 alignments.
    - Changed the Python script that makes reads using 2 arguments: the name of the genome file and the name of the
        output. This script will be called by the bash script twice to construct the reads.

    - Have changed the Python scripts (make_reads_fa.py and find_borders_test.py) to take arguments from the command
        line using sys.argv, allowing me to call them through the bash script multiple times with different arguments.

    - Something to keep in mind is the reads are not created exactly the same each time, so there will be variation in
        the results. This is also true for the steps that use Bowtie2, as the alignments it performs are not the same
        every time. This built-in "randomness" is something I need to consider when verifying the results.
        20x coverage seems to be enough to reliably catch every breakpoint every time but this remains to be verified.

    - The script now works from a single command line argument. Success!
